@description('Location for the container registry')
param location string

@description('Name of the Azure Container Registry')
param registryName string

@description('SKU for the registry')
@allowed([ 'Basic', 'Standard', 'Premium' ])
param sku string = 'Standard'

@description('Enable admin user (for bootstrapping only; prefer AAD tokens)')
param adminUserEnabled bool = false

@description('Tags to apply to the registry')
param tags object = {}

@description('Optional scope maps to create on the registry')
param scopeMaps array = [] // [{ name: string, description: string, actions: string[] }]


resource acr 'Microsoft.ContainerRegistry/registries@2025-05-01-preview' = {
  name: registryName
  location: location
  tags: tags
  sku: {
    name: sku
  }
  properties: {
    adminUserEnabled: adminUserEnabled
    publicNetworkAccess: 'Enabled'
    networkRuleBypassOptions: 'AzureServices'
    zoneRedundancy: 'Disabled'
    anonymousPullEnabled: false
    roleAssignmentMode: 'AbacRepositoryPermissions'
    autoGeneratedDomainNameLabelScope: 'NoReuse'
  }
}

output registryId string = acr.id
output registryLoginServer string = acr.properties.loginServer
output registryNameOut string = acr.name

// Optional Scope Maps
resource acrScopeMaps 'Microsoft.ContainerRegistry/registries/scopeMaps@2025-05-01-preview' = [for sm in scopeMaps: {
  parent: acr
  name: sm.name
  properties: {
    description: sm.description
    actions: sm.actions
  }
}]
