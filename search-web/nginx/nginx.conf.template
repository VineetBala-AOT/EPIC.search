# nginx.conf
worker_processes auto;
error_log  /var/log/nginx/error.log;

pid /tmp/nginx.pid;

events {
  worker_connections 4096;
}

http {
  include       /etc/nginx/mime.types;
  client_body_temp_path /tmp/client_temp;
  proxy_temp_path       /tmp/proxy_temp_path;
  fastcgi_temp_path     /tmp/fastcgi_temp;
  uwsgi_temp_path       /tmp/uwsgi_temp;
  scgi_temp_path        /tmp/scgi_temp;
  default_type  application/octet-stream;
  server_tokens off;
  underscores_in_headers on;

  # Extract hostname from PROXY_API_URL
  map $PROXY_API_URL $api_host {
      "~^https?://([^/]+)" $1;
      default "";
  }

  # Use a w3c standard log format
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;

  # Add more detailed logging format
  log_format debug_log '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'upstream_addr="$upstream_addr" '
                        'upstream_status="$upstream_status" '
                        'upstream_response_time="$upstream_response_time" '
                        'proxy_host="$proxy_host" '
                        'request_time="$request_time" '
                        'proxy_pass_url="${PROXY_API_URL}"';

  resolver 127.0.0.11 8.8.8.8 valid=30s;
  resolver_timeout 5s;

  server {

    # Disable TRACE and OPTIONS methods
    if ($request_method = OPTIONS) {
      return 405;
    }
    if ($request_method = TRACE) {
      return 405;
    }

    # Add common security headers
    add_header Content-Security-Policy "default-src * data: blob: filesystem: 'unsafe-inline' 'unsafe-eval'";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection 1;
    add_header X-Frame-Options SAMEORIGIN;

    # Listen on port 8080
    listen 8080;
    server_name _;

    index index.html;
    error_log /dev/stdout info;
    access_log /dev/stdout;

    # Health check endpoint
    location /healthz {
      access_log off;
      return 200 '{"status":"healthy","timestamp":"$time_iso8601","service":"epic-search-web"}\n';
      add_header Content-Type application/json;
    }

    # Serve the React Vite app
    location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
      try_files $uri $uri/ /index.html;    }    # Proxy configuration for API requests
    location /api/ {
      # Remove the trailing slash from proxy_pass to avoid double slashes
      proxy_pass ${PROXY_API_URL};
      
      # Use the extracted hostname
      proxy_set_header Host $api_host;
      
      # Remove the duplicate Host header
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      
      # Add Content-Type header if not present
      proxy_set_header Content-Type application/json;
      
      # Configure timeouts for longer-running requests
      proxy_connect_timeout       60s;
      proxy_send_timeout          60s;
      proxy_read_timeout          300s;  # 5 minutes for search operations
      proxy_buffer_size           4k;
      proxy_buffers               8 4k;
      proxy_busy_buffers_size     8k;
      
      # Add error handling
      proxy_intercept_errors on;
      error_page 502 503 504 = @fallback;

      # Add debug headers to response
      add_header X-Debug-Proxy-Pass ${PROXY_API_URL} always;
      add_header X-Debug-Original-URI $request_uri always;
      add_header X-Debug-Host $host always;
      add_header X-Debug-Proxy-Host $proxy_host always;
      add_header X-Debug-Request-Body $request_body always;
      add_header X-Debug-Content-Type $http_content_type always;

      # Change access log to use debug format for this location
      access_log /dev/stdout debug_log;
    }

    # Fallback location for when the API is not available
    location @fallback {
      return 502 '{"error": "API server is not available or request timed out", "message": "The backend API may be experiencing high load or connectivity issues. Please try again."}';
      add_header Content-Type application/json;
    }

    # Error page configuration
    error_page   500 502 503 504  /50x.html;

    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}