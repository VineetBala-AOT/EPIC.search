/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestNoAuthImport } from './routes/test-no-auth'
import { Route as StatsImport } from './routes/stats'
import { Route as SearchImport } from './routes/search'
import { Route as OidcCallbackImport } from './routes/oidc-callback'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as EaoPlansIndexImport } from './routes/eao-plans/index'
import { Route as EaoPlansPlanIdImport } from './routes/eao-plans/$planId'
import { Route as AuthenticatedStatsImport } from './routes/_authenticated/stats'
import { Route as AuthenticatedProfileImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedUsersIndexImport } from './routes/_authenticated/users/index'

// Create Virtual Routes

const NewpageLazyImport = createFileRoute('/newpage')()
const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const NewpageLazyRoute = NewpageLazyImport.update({
  path: '/newpage',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/newpage.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const TestNoAuthRoute = TestNoAuthImport.update({
  path: '/test-no-auth',
  getParentRoute: () => rootRoute,
} as any)

const StatsRoute = StatsImport.update({
  path: '/stats',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const OidcCallbackRoute = OidcCallbackImport.update({
  path: '/oidc-callback',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EaoPlansIndexRoute = EaoPlansIndexImport.update({
  path: '/eao-plans/',
  getParentRoute: () => rootRoute,
} as any)

const EaoPlansPlanIdRoute = EaoPlansPlanIdImport.update({
  path: '/eao-plans/$planId',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedStatsRoute = AuthenticatedStatsImport.update({
  path: '/stats',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/oidc-callback': {
      id: '/oidc-callback'
      path: '/oidc-callback'
      fullPath: '/oidc-callback'
      preLoaderRoute: typeof OidcCallbackImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/stats': {
      id: '/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof StatsImport
      parentRoute: typeof rootRoute
    }
    '/test-no-auth': {
      id: '/test-no-auth'
      path: '/test-no-auth'
      fullPath: '/test-no-auth'
      preLoaderRoute: typeof TestNoAuthImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/newpage': {
      id: '/newpage'
      path: '/newpage'
      fullPath: '/newpage'
      preLoaderRoute: typeof NewpageLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/stats': {
      id: '/_authenticated/stats'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof AuthenticatedStatsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/eao-plans/$planId': {
      id: '/eao-plans/$planId'
      path: '/eao-plans/$planId'
      fullPath: '/eao-plans/$planId'
      preLoaderRoute: typeof EaoPlansPlanIdImport
      parentRoute: typeof rootRoute
    }
    '/eao-plans/': {
      id: '/eao-plans/'
      path: '/eao-plans'
      fullPath: '/eao-plans'
      preLoaderRoute: typeof EaoPlansIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute.addChildren({
    AuthenticatedProfileRoute,
    AuthenticatedStatsRoute,
    AuthenticatedUsersIndexRoute,
  }),
  OidcCallbackRoute,
  SearchRoute,
  StatsRoute,
  TestNoAuthRoute,
  AboutLazyRoute,
  NewpageLazyRoute,
  EaoPlansPlanIdRoute,
  EaoPlansIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/oidc-callback",
        "/search",
        "/stats",
        "/test-no-auth",
        "/about",
        "/newpage",
        "/eao-plans/$planId",
        "/eao-plans/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/profile",
        "/_authenticated/stats",
        "/_authenticated/users/"
      ]
    },
    "/oidc-callback": {
      "filePath": "oidc-callback.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/stats": {
      "filePath": "stats.tsx"
    },
    "/test-no-auth": {
      "filePath": "test-no-auth.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/newpage": {
      "filePath": "newpage.lazy.tsx"
    },
    "/_authenticated/profile": {
      "filePath": "_authenticated/profile.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/stats": {
      "filePath": "_authenticated/stats.tsx",
      "parent": "/_authenticated"
    },
    "/eao-plans/$planId": {
      "filePath": "eao-plans/$planId.tsx"
    },
    "/eao-plans/": {
      "filePath": "eao-plans/index.tsx"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
